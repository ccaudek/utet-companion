{
  "hash": "64018bc7a7898dae120d7191e9cbff12",
  "result": {
    "engine": "knitr",
    "markdown": "# Distribuzione predittiva a posteriori {#sec-bayesian-inference-post-pred-distr}\n\n::: {.epigraph}\n> “The general idea of posterior predictive checking is simple: if a model is a good fit to data, then replicated data generated under the model should look similar to the observed data.”\n>\n> -- **Andrew Gelman, Xiao-Li Meng & Hal Stern**, Posterior predictive assessment of model fitness via realized discrepancies (Statistica Sinica, 1996, p. 733)\n:::\n\n\n\n## Introduzione {.unnumbered .unlisted}\n\nNei capitoli precedenti abbiamo visto due aspetti fondamentali dell’inferenza bayesiana: da un lato, la costruzione delle distribuzioni a posteriori per i parametri di interesse; dall’altro, l’importanza di verificare i priori attraverso i controlli predittivi, per assicurarci che le nostre assunzioni iniziali siano coerenti con la realtà psicologica che vogliamo studiare.\n\nOra compiamo un passo ulteriore: invece di chiederci se i nostri priori siano ragionevoli, ci chiediamo se *l’intero modello*, dopo aver incorporato i dati osservati, sia in grado di generare previsioni plausibili. Questo ci porta al concetto di *distribuzione predittiva a posteriori* (*posterior predictive distribution*).\n\nLa logica è semplice e potente: se un modello è una rappresentazione credibile del processo che ha generato i dati, allora dovrebbe essere in grado non solo di adattarsi ai dati raccolti, ma anche di simulare dati nuovi con caratteristiche simili. In questo senso, le distribuzioni predittive a posteriori diventano uno strumento centrale per la valutazione dei modelli: collegano direttamente i parametri stimati ai dati futuri che ci aspettiamo di osservare.\n\nIn questo capitolo vedremo come costruire la distribuzione predittiva a posteriori, come interpretarla e come utilizzarla per verificare la coerenza del modello con l’evidenza empirica. Questo approccio ci permetterà di mettere alla prova in modo pratico la capacità del modello di spiegare e prevedere i fenomeni psicologici che ci interessano.\n\n\n### Panoramica del capitolo {.unnumbered .unlisted}\n\n- Previsione bayesiana: incorporare incertezza parametrica e variabilità intrinseca.\n- Verifica di coerenza: valutare l'adeguatezza del modello ai dati osservati.\n- Caso beta-binomiale: applicazione pratica del framework predittivo.\n\n::: {.callout-tip collapse=true}\n## Prerequisiti\n\n- Leggere il capitolo [Posterior Inference & Prediction](https://www.bayesrulesbook.com/chapter-8#ch8-post-pred) di [Bayes Rules!](https://www.bayesrulesbook.com).\n- Consultare *Bayesian statistics and modelling* [@van2021bayesian].\n:::\n\n::: {.callout-caution collapse=true title=\"Preparazione del Notebook\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::here(\"code\", \"_common.R\") |> \n  source()\n```\n:::\n\n:::\n\n\n## Definizione formale\n\nSi considerino dati osservati $y = \\{y_1, y_2, \\ldots, y_n\\}$, generati da un modello probabilistico parametrizzato da $\\theta$, dove $\\theta$ può rappresentare una probabilità, una media, un vettore di coefficienti o altri parametri di interesse. La conoscenza iniziale su $\\theta$ è formalizzata attraverso una *distribuzione a priori* $p(\\theta)$. L'osservazione dei dati consente di aggiornare questa conoscenza mediante il teorema di Bayes, ottenendo la *distribuzione a posteriori*:\n\n$$\np(\\theta \\mid y) = \\frac{p(y \\mid \\theta)\\, p(\\theta)}{p(y)},\n$$\ndove:\n\n* $p(\\theta \\mid y)$ è la distribuzione a posteriori, che rappresenta l'incertezza su $\\theta$ condizionata ai dati osservati;\n* $p(y \\mid \\theta)$ è la *funzione di verosimiglianza*, che specifica la probabilità dei dati dati i parametri;\n* $p(\\theta)$ è la distribuzione a priori;\n* $p(y)$ è l'*evidenza* marginale, calcolata come\n\n  $$\n  p(y) = \\int p(y \\mid \\theta) p(\\theta)\\, d\\theta.\n  $$\n\n### La distribuzione predittiva a posteriori\n\nSia $\\tilde{y}$ una nuova osservazione da prevedere. La *distribuzione predittiva a posteriori* $p(\\tilde{y} \\mid y)$ fornisce la distribuzione probabilistica di $\\tilde{y}$ condizionata ai dati osservati.\n\n#### Natura di $\\tilde{y}$\n\n* $\\tilde{y}$ rappresenta un dato futuro non ancora osservato;\n* Nell'esempio binomiale, se $y$ è il numero di successi in $n$ prove, $\\tilde{y}$ può rappresentare il numero di successi in $n_{\\text{new}}$ prove future.\n\n#### Relazione condizionale\n\n* $p(\\tilde{y} \\mid \\theta)$ esprime la probabilità di $\\tilde{y}$ assumendo noto il parametro $\\theta$;\n* Nel caso binomiale: $p(\\tilde{y} \\mid \\theta) = \\binom{n_{\\text{new}}}{\\tilde{y}} \\theta^{\\tilde{y}} (1-\\theta)^{n_{\\text{new}}-\\tilde{y}}$.\n\n#### Integrazione sull'incertezza parametrica\n\nPoiché $\\theta$ è incerto, la distribuzione predittiva a posteriori integra su tutti i possibili valori di $\\theta$, pesati secondo la distribuzione a posteriori:\n\n$$\np(\\tilde{y} \\mid y) = \\int p(\\tilde{y} \\mid \\theta)\\, p(\\theta \\mid y)\\, d\\theta.\n$$ {#eq-post-pred-distr}\n\n#### Interpretazione\n\nLa distribuzione predittiva a posteriori $p(\\tilde{y} \\mid y)$ rappresenta la migliore previsione probabilistica per dati futuri, incorporando tanto l'incertezza sui parametri del modello quanto la variabilità intrinseca del processo generativo dei dati.\n\n\n## Il modello Beta-Binomiale\n\nSi consideri un esperimento binomiale consistente in $n$ prove indipendenti, dove si osserva il numero di successi $y$ (ad esempio, il numero di teste nel lancio di una moneta). L'approccio bayesiano si articola in tre fasi fondamentali:\n\n1. **Specificazione della distribuzione a priori**\n   La conoscenza iniziale riguardante la probabilità di successo $p$ viene formalizzata attraverso una distribuzione *Beta($\\alpha, \\beta$)*, particolarmente appropriata per parametri definiti sull'intervallo unitario:\n\n   * Il parametro $\\alpha$ rappresenta un numero pseudo-osservato di successi;\n   * Il parametro $\\beta$ rappresenta un numero pseudo-osservato di insuccessi.\n\n   Questa parametrizzazione consente di incorporare conoscenze pregresse in forma di \"evidenza virtuale\".\n\n2. **Aggiornamento bayesiano alla distribuzione a posteriori**\n   Dopo l'osservazione di $y$ successi in $n$ prove, la distribuzione a posteriori si ottiene mediante aggiornamento coniugato:\n\n   $$\n   p \\mid y \\sim \\text{Beta}(\\alpha + y, \\beta + n - y).\n   $$\n\n   Questa distribuzione caratterizza completamente l'incertezza residua sul parametro $p$ condizionatamente ai dati osservati.\n\n3. **Costruzione della distribuzione predittiva a posteriori**\n   Per prevedere il numero di successi $y_{\\text{new}}$ in $n_{\\text{new}}$ prove future, si integra l'incertezza parametrica con la variabilità campionaria attraverso il seguente procedimento:\n\n   * Campionamento parametrico: $p^{(s)} \\sim \\text{Beta}(\\alpha + y, \\beta + n - y)$\n   * Generazione predittiva: $y_{\\text{new}}^{(s)} \\sim \\text{Binomial}(n_{\\text{new}}, p^{(s)})$\n\n   La distribuzione empirica dei valori $y_{\\text{new}}^{(s)}$ costituisce un'approssimazione Monte Carlo della distribuzione predittiva a posteriori, incorporando sia l'incertezza epistemica su $p$ sia la variabilità aleatoria del processo binomiale.\n\n\n## Un esempio numerico\n\n### I dati e le nostre conoscenze iniziali\n\n* **Dati osservati**: 70 successi su 100 prove (ad esempio, 70 teste su 100 lanci di moneta)\n* **Conoscenza iniziale (prior)**: usiamo una distribuzione Beta(2, 2). Questa prior è \"debole\" e suggerisce che pensiamo che la moneta sia probabilmente equilibrata (p ≈ 0.5), ma siamo aperti ad altre possibilità.\n\n### Aggiornamento delle nostre conoscenze\n\nDopo aver visto i dati, aggiorniamo le nostre convinzioni sulla probabilità di successo p:\n\n```\nalpha_posterior = 2 + 70 = 72\nbeta_posterior = 2 + (100 - 70) = 32\n```\n\nOra crediamo che p segua una distribuzione Beta(72, 32), che è centrata attorno a 0.7.\n\n### Simulazione delle previsioni\n\nVogliamo prevedere cosa succederà in 10 lanci futuri:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Dati osservati\nsuccessi_osservati <- 70\nlanci_totali <- 100\n\n# Prior (conoscenza iniziale)\nalpha_prior <- 2\nbeta_prior <- 2\n\n# Posterior (conoscenza aggiornata)\nalpha_post <- alpha_prior + successi_osservati\nbeta_post <- beta_prior + (lanci_totali - successi_osservati)\n\n# Simuliamo 1000 valori plausibili per p\nvalori_p <- rbeta(1000, alpha_post, beta_post)\n\n# Per ogni valore di p, simuliamo 10 lanci futuri\nsuccessi_futuri <- rbinom(1000, size = 10, prob = valori_p)\n\n# Calcoliamo le proporzioni di successo\nproporzioni_future <- successi_futuri / 10\n```\n:::\n\n\n\n### Spiegazione passo per passo\n\nAbbiamo osservato 70 successi su 100 lanci. Con una prior Beta(2,2), la distribuzione a posteriori diventa Beta(72,32). Questo significa che non conosciamo il valore esatto della probabilità di successo $p$, ma possiamo descrivere in modo plausibile l’incertezza che lo circonda: molto probabilmente $p$ si trova vicino a 0.7, con una certa variabilità intorno a questo valore.\n\nPer rappresentare questa incertezza, estraiamo 1000 valori da una distribuzione Beta(72,32): `valori_p <- rbeta(1000, 72, 32)`. Ciascun valore estratto è un candidato possibile per $p$, compatibile con i dati osservati e con la nostra conoscenza iniziale. A questo punto, ci chiediamo: cosa potremmo osservare nei prossimi lanci? Per rispondere, per ogni valore di $p$ simuliamo 10 nuovi lanci, ottenendo così 1000 possibili scenari futuri: `successi_futuri <- rbinom(1000, size = 10, prob = valori_p)`.\n\nInfine, trasformiamo il numero di successi in proporzioni dividendo per 10, in modo da avere risultati immediatamente interpretabili come probabilità di successo nei lanci futuri: `proporzioni_future <- successi_futuri / 10`. In altre parole, otteniamo un quadro di ciò che possiamo aspettarci, tenendo insieme due fonti di incertezza: da un lato non sappiamo il valore esatto di $p$, dall’altro anche conoscendo $p$ i risultati dei lanci rimarrebbero comunque soggetti al caso.\n\nIl vettore `proporzioni_future` riassume queste possibilità: non una singola previsione puntuale, ma un’intera distribuzione di esiti futuri, coerente con i dati raccolti e con il modello bayesiano adottato.\n\n\n### Visualizziamo i risultati\n\nDistribuzione iniziale (prima di vedere i dati):\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data.frame(x = c(0, 1)), aes(x = x)) +\n  stat_function(fun = dbeta, \n                args = list(shape1 = alpha_prior, shape2 = beta_prior), \n                color = \"#4682B4\", size = 1) +\n  labs(x = \"Probabilità di successo (p)\",\n       y = \"Densità\")\n```\n\n::: {.cell-output-display}\n![](10_post_pred_distr_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nConoscenza aggiornata (dopo aver visto i dati):\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data.frame(x = c(0, 1)), aes(x = x)) +\n  stat_function(fun = dbeta, \n                args = list(shape1 = alpha_post, shape2 = beta_post), \n                color = \"#A0522D\", size = 1) +\n  labs(x = \"Probabilità di successo (p)\",\n       y = \"Densità\")\n```\n\n::: {.cell-output-display}\n![](10_post_pred_distr_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\nPrevisioni per i prossimi 10 lanci:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data.frame(proporzioni = proporzioni_future), aes(x = proporzioni)) +\n  geom_histogram(aes(y = ..density..), bins = 20) +\n  geom_vline(aes(xintercept = successi_osservati / lanci_totali), \n             color = \"black\", size = 1, linetype = \"dashed\") +\n  labs(x = \"Proporzione di successi attesi\",\n       y = \"Densità\")\n```\n\n::: {.cell-output-display}\n![](10_post_pred_distr_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=85%}\n:::\n:::\n\n\n### Interpretazione dei risultati\n\n* La nostra conoscenza su $p$ è ora concentrata attorno a 0.7 (grafico in rosso).\n* Le previsioni per 10 lanci futuri sono più variabili perché:\n  - Siamo ancora un po' incerti sul valore esatto di $p$.\n  - Anche se conoscessimo p perfettamente, 10 lanci potrebbero dare risultati leggermente diversi.\n\n* Il risultato osservato (70% di successi) cade nella zona più probabile delle nostre previsioni: questo ci dice che il nostro modello è ragionevole e può essere usato per fare previsioni future.\n\n**In pratica**: se dovessi scommettere sui prossimi 10 lanci, ti aspetteresti probabilmente 6-8 successi, ma potrebbero essercene anche 5 o 9 per puro caso.\n\n\n::: {.callout-caution collapse=true title=\"Nota\"}\nIl fatto che, nel nostro esempio, la distribuzione predittiva a posteriori riproduca efficacemente i dati osservati potrebbe apparire come un risultato scontato. In realtà, questo esito positivo è significativo e tutt'altro che banale; dimostra che il nostro modello semplice è ben calibrato. Abbiamo scelto deliberatamente un modello binomiale con prior Beta proprio per la sua chiarezza espositiva, che ci permette di illustrare in modo trasparente la logica sottostante alla distribuzione predittiva a posteriori e mostrare visivamente come l'incertezza sui parametri e la variabilità intrinseca dei dati si integrino in un unico framework.\n\nTuttavia, è fondamentale comprendere che nella ricerca psicologica reale ci si confronta con modelli notevolmente più complessi. In questi contesti, la corrispondenza tra i dati effettivamente osservati e quelli generati dal modello attraverso la distribuzione predittiva non può mai essere considerata una garanzia preliminare. Al contrario, questa corrispondenza rappresenta proprio l'obiettivo da verificare.\n:::\n\n\n## Riflessioni conclusive {.unnumbered .unlisted}\n\nLe distribuzioni predittive a posteriori rappresentano il naturale completamento del percorso iniziato con i priori. Se i *prior predictive checks* ci consentono di controllare la plausibilità delle nostre assunzioni iniziali, i *posterior predictive checks* ci permettono di verificare la plausibilità del modello alla luce dei dati.\n\nDal punto di vista concettuale, questo passaggio è cruciale: sposta l’attenzione dai parametri astratti ai dati concreti, e ci chiede di valutare i modelli sulla base della loro capacità di generare osservazioni simili a quelle reali. In questo senso, la distribuzione predittiva a posteriori non è soltanto un accessorio tecnico, ma una vera e propria *prova di realtà* per i modelli psicologici.\n\nDal punto di vista applicativo, questo approccio rafforza la trasparenza e la robustezza delle nostre inferenze. Non ci limitiamo più a riportare valori puntuali o intervalli credibili per i parametri: mostriamo esplicitamente quali dati il nostro modello ritiene plausibili e li confrontiamo con i dati effettivamente raccolti. Questo rende la comunicazione dei risultati più chiara e intuitiva, anche per chi non ha familiarità con la statistica bayesiana.\n\nIn sintesi, le distribuzioni predittive a posteriori ci ricordano che la forza dell’approccio bayesiano non risiede soltanto nella stima dei parametri, ma soprattutto nella capacità di *prevedere e spiegare* i fenomeni. Nei capitoli successivi vedremo come questa logica si estenda anche al confronto sistematico tra modelli, aprendo la strada a un approccio più rigoroso e cumulativo alla scienza psicologica.\n\n\n::: {.callout-important title=\"Problemi\" collapse=\"true\"}\n\nConsideriamo i dati della SWLS somministrata a un campione di studenti, ottenendo per ciascuno uno *score* complessivo. Per semplicità, vogliamo “dichiarare positivo” lo studente se il punteggio SWLS supera una determinata **soglia** (ad esempio, 20 su 35). In questo modo otteniamo una variabile dicotomica (0/1), che useremo come “successo” in un modello binomiale.\n\n1. **Dati e conteggio dei successi**  \n\n   - Carica il dataset con le risposte SWLS.  \n   - Costruisci la variabile binaria (ad esempio `SWLS_dich`) che vale 1 se lo score ≥ 20, e 0 altrimenti.  \n   - Calcola il **numero di successi** (numero di persone che superano la soglia) e il **numero totale di osservazioni** (N).\n\n2. **Modello beta-binomiale (approccio manuale via simulazione)**  \n\n   - **Specifica una distribuzione Beta(a, b)** come prior per la probabilità di successo $p$. Scegli una coppia $(a, b)$ relativamente poco informativa, ad esempio (2,2) o (1,1).  \n   - Osservando $y$ successi su $n$ soggetti, aggiorna i parametri a posteriori:\n     $$\n       a_{\\text{post}} = a + y, \n       \\quad\n       b_{\\text{post}} = b + (n - y).\n     $$  \n   - Simula un gran numero di campioni di $p$ dalla distribuzione Beta$\\bigl(a_{\\text{post}},\\, b_{\\text{post}}\\bigr)$.  \n   - Per ciascun campione di $p$, genera un valore $\\tilde{y}$ da una Binomiale$\\bigl(n_{\\text{new}}, p\\bigr)$, dove $n_{\\text{new}}$ è la dimensione di un ipotetico nuovo campione (che puoi scegliere, ad esempio, uguale a $n$ oppure un valore diverso). Otterrai così una **posterior predictive distribution** per $\\tilde{y}$.  \n   - Infine, calcola statistiche descrittive (media, varianza, intervalli) e/o disegna un istogramma di $\\tilde{y}$ o della proporzione $\\tilde{y}/n_{\\text{new}}$.  \n\n3. **Replicare con *brms***  \n\n   - Usa il pacchetto **brms** per costruire un modello binomiale. Per esempio:\n   \n     ```r\n     library(brms)\n     \n     # Crea un data frame con la variabile dicotomica\n     df_binom <- data.frame(\n       successes = y,    # conteggio dei successi\n       failures  = n - y\n     )\n     \n     # Modello binomiale con prior Beta(a,b) approssimato tramite logit\n     fit_brms <- brm(\n       bf(successes | trials(n) ~ 1), \n       data = df_binom,\n       family = binomial(link = \"logit\"),\n       prior = c(\n         prior(beta(2, 2), class = \"Intercept\", dpar = \"mu\") \n         # NOTA: la specifica di una \"beta(2,2)\" diretta sull'intercetta\n         # è un'approssimazione, tipicamente serve passare a una scala logit.\n         # In brms, di solito si usa prior su scale normali dell'intercetta.\n       ),\n       seed = 123\n     )\n     ```\n     *(Le specifiche del `prior` potrebbero richiedere una formulazione differente se vuoi rispettare esattamente la corrispondenza con Beta(a,b). In ogni caso, l’idea è mostrare come definire un prior e costruire un modello binomiale con `brms`.)*\n     \n   - Verifica la convergenza e poi estrai la **posterior predictive distribution** con le funzioni di *brms*:\n   \n     ```r\n     pp_check(fit_brms, nsamples = 100)\n     ```\n     Questo ti mostrerà come i dati predetti dal modello (in termini di binomiale) si confrontano con i dati osservati.  \n\n4. **Confronto e interpretazione**  \n\n   - Metti a confronto i risultati della simulazione “manuale” (Beta-Binomial) e quelli ottenuti con *brms*. Noterai che le distribuzioni predittive dovrebbero essere coerenti, se hai impostato un prior per *brms* simile a quello del modello Beta-Binomiale.  \n   - Discuti brevemente se la distribuzione predittiva a posteriori acquisita è plausibile rispetto ai dati osservati. Ad esempio, la probabilità di osservare $\\tilde{y}$ simile a $y$ dovrebbe essere relativamente alta se il modello è appropriato.  \n   - Se vuoi, puoi cambiare $n_{\\text{new}}$ (es. previsione su 200 soggetti futuri) per vedere come la variabilità della previsione si “ridimensiona” o cresce a seconda della taglia del campione.  \n:::\n\n::: {.callout-tip title=\"Soluzioni\" collapse=\"true\"}\n\n1. **Costruzione del dataset**  \n\n   - Se la SWLS varia tra 5 e 35, e la soglia è 20, puoi fare:\n   \n     ```r\n     df$SWLS_dich <- ifelse(df$SWLS_score >= 20, 1, 0)\n     y <- sum(df$SWLS_dich)\n     n <- nrow(df)\n     ```\n2. **Approccio Beta-Binomial manuale** \n\n   - Prior: $(a, b) = (2, 2)$  \n   - Posterior: $(a_{\\text{post}}, b_{\\text{post}}) = (2 + y,\\, 2 + n - y)$.  \n   - Generazione dei campioni:\n   \n     ```r\n     N_sim <- 2000\n     p_post <- rbeta(N_sim, a_post, b_post)\n     y_pred <- rbinom(N_sim, size = n_new, prob = p_post)\n     \n     # Se preferisci la proporzione futura:\n     prop_pred <- y_pred / n_new\n     ```\n     \n   - Statistiche: \n   \n     ```r\n     mean_p <- mean(p_post) # media a posteriori di p\n     quantile_p <- quantile(p_post, c(0.025, 0.975))  \n     \n     mean_prop_pred <- mean(prop_pred)\n     quantile_prop_pred <- quantile(prop_pred, c(0.025, 0.975))\n     ```\n   - Grafici (istogramma e densità):\n   \n     ```r\n     hist(prop_pred, freq=FALSE, col='lightblue',\n          main='Posterior Predictive Distribution: prop. di successi')\n     ```\n3. **Modello con *brms***  \n\n   - Usa la sintassi di una binomiale con offset o con `trials(n)`.  \n   - Specifica un prior che approssimi Beta(2,2) sullo scale logit, ad esempio:\n   \n     ```r\n     # Beta(2,2) ha media ~ 0.5, varianza relativamente ampia.\n     # Approssimandola su scala logit ~ normal(0, 2.2) \n     # (valore indicativo: la normal(0, 2) su logit copre un intervallo ampio).\n     \n     prior_approx <- prior(normal(0, 2), class = \"Intercept\")\n     ```\n   - Esegui `pp_check(fit_brms)` e interpreta.\n\n4. **Interpretazione**  \n\n   - Se la soglia scelta per la SWLS cattura un “buon livello di soddisfazione”, potresti aspettarti una certa % di successi.  \n   - Se i dati futuri simulati sono coerenti con i dati reali — ad esempio, la media di $\\tilde{y}$ è vicina a $y$ — allora il modello sembra descrivere bene la realtà. Altrimenti, potresti rivedere la soglia o la specifica del prior.\n\nL’elemento chiave è che la **distribuzione predittiva a posteriori** (posterior predictive distribution) non si limita a considerare *un solo* valore di $p$, bensì campiona molteplici valori plausibili (dalla *posterior*), e per *ciascuno* simula un potenziale outcome. Così facendo, si riflette pienamente l’incertezza residua sul parametro e l’aleatorietà del processo binomiale.\n:::\n\n::: {.callout-note collapse=true title=\"Informazioni sull'ambiente di sviluppo\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsessionInfo()\n#> R version 4.5.1 (2025-06-13)\n#> Platform: aarch64-apple-darwin20\n#> Running under: macOS Sequoia 15.6.1\n#> \n#> Matrix products: default\n#> BLAS:   /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib \n#> LAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.1\n#> \n#> locale:\n#> [1] C/UTF-8/C/C/C/C\n#> \n#> time zone: Europe/Rome\n#> tzcode source: internal\n#> \n#> attached base packages:\n#> [1] stats     graphics  grDevices utils     datasets  methods   base     \n#> \n#> other attached packages:\n#>  [1] pillar_1.11.0         tinytable_0.13.0      patchwork_1.3.2      \n#>  [4] ggdist_3.3.3          tidybayes_3.0.7       bayesplot_1.14.0     \n#>  [7] ggplot2_3.5.2         reliabilitydiag_0.2.1 priorsense_1.1.1     \n#> [10] posterior_1.6.1       loo_2.8.0             rstan_2.32.7         \n#> [13] StanHeaders_2.32.10   brms_2.22.0           Rcpp_1.1.0           \n#> [16] sessioninfo_1.2.3     conflicted_1.2.0      janitor_2.2.1        \n#> [19] matrixStats_1.5.0     modelr_0.1.11         tibble_3.3.0         \n#> [22] dplyr_1.1.4           tidyr_1.3.1           rio_1.2.3            \n#> [25] here_1.0.1           \n#> \n#> loaded via a namespace (and not attached):\n#>  [1] svUnit_1.0.8          tidyselect_1.2.1      farver_2.1.2         \n#>  [4] fastmap_1.2.0         TH.data_1.1-4         tensorA_0.36.2.1     \n#>  [7] digest_0.6.37         timechange_0.3.0      estimability_1.5.1   \n#> [10] lifecycle_1.0.4       survival_3.8-3        magrittr_2.0.3       \n#> [13] compiler_4.5.1        rlang_1.1.6           tools_4.5.1          \n#> [16] knitr_1.50            labeling_0.4.3        bridgesampling_1.1-2 \n#> [19] htmlwidgets_1.6.4     curl_7.0.0            pkgbuild_1.4.8       \n#> [22] RColorBrewer_1.1-3    abind_1.4-8           multcomp_1.4-28      \n#> [25] withr_3.0.2           purrr_1.1.0           grid_4.5.1           \n#> [28] stats4_4.5.1          colorspace_2.1-1      xtable_1.8-4         \n#> [31] inline_0.3.21         emmeans_1.11.2-8      scales_1.4.0         \n#> [34] MASS_7.3-65           cli_3.6.5             mvtnorm_1.3-3        \n#> [37] rmarkdown_2.29        ragg_1.5.0            generics_0.1.4       \n#> [40] RcppParallel_5.1.11-1 cachem_1.1.0          stringr_1.5.1        \n#> [43] splines_4.5.1         parallel_4.5.1        vctrs_0.6.5          \n#> [46] V8_7.0.0              Matrix_1.7-4          sandwich_3.1-1       \n#> [49] jsonlite_2.0.0        arrayhelpers_1.1-0    systemfonts_1.2.3    \n#> [52] glue_1.8.0            codetools_0.2-20      distributional_0.5.0 \n#> [55] lubridate_1.9.4       stringi_1.8.7         gtable_0.3.6         \n#> [58] QuickJSR_1.8.0        htmltools_0.5.8.1     Brobdingnag_1.2-9    \n#> [61] R6_2.6.1              textshaping_1.0.3     rprojroot_2.1.1      \n#> [64] evaluate_1.0.5        lattice_0.22-7        backports_1.5.0      \n#> [67] memoise_2.0.1         broom_1.0.9           snakecase_0.11.1     \n#> [70] rstantools_2.5.0      coda_0.19-4.1         gridExtra_2.3        \n#> [73] nlme_3.1-168          checkmate_2.3.3       xfun_0.53            \n#> [76] zoo_1.8-14            pkgconfig_2.0.3\n```\n:::\n\n:::\n\n## Bibliografia {.unnumbered .unlisted}\n\n\n",
    "supporting": [
      "10_post_pred_distr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}